2. টাইম কমপ্লেক্সিটি - ১ (time complexity - 1)				------------------------------

import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    int i, j, n, count;
    System.out.println("Type a number:");
    Scanner myObj = new Scanner(System.in);
    n = myObj.nextInt();

    count = 0;

    for(i = 0; i < n; i++)
     {
        count = count + 1;
     }

     System.out.println("n = " + n + ", count = " + count);
  }
}

// Output:
	n = 5, count = 5

// count = n

// Time Complexity is O(n)



//	13:38

import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    int i, j, n, count;
    System.out.println("Type a number:");
    Scanner myObj = new Scanner(System.in);
    n = myObj.nextInt();

    count = 0;
     for(i = 0; i < n; i++)
     {
        for(j = 0; j < n; j++)
        {
          count = count + 1;
        }
     }

     System.out.println("n = " + n + ", count = " + count);
  }
}

// Output:
	n = 5, count = 25

// count = n^2

// Time Complexity is O(n^2)




import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    int i, j, k, n, count;
    System.out.println("Type a number:");
    Scanner myObj = new Scanner(System.in);
    n = myObj.nextInt();

    count = 0;
     for(i = 0; i < n; i++)
     {
        for(j = 0; j < n; j++)
        {
          for(k = 0; k < n; k++)
          {
            count = count + 1;
          }
        }
     }

     System.out.println("n = " + n + ", count = " + count);
  }
}


// Output:
	n = 3, count = 27

// count = n^3

// Time Complexity is O(n^3)




3. টাইম কমপ্লেক্সিটি - ২ (time complexity - 2)			---------------------------------------

import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    int i, j, n, count;
    System.out.println("Type a number:");
    Scanner myObj = new Scanner(System.in);
    n = myObj.nextInt();

    count = 0;
     for(i = 0; i < n; i++)
     {
        for(j = 0; j < n; j++)
        {
          count = count + 1;
        }
     }

    for(i = 0; i < n; i++)
     {
        count = count + 1;
     }

     System.out.println("n = " + n + ", count = " + count);
  }
}

// Output:
	n = 3, count = 12

// count = n^2 + n

// Time Complexity is O(n^2) because we see in graph n^2 increase rapidly then n.

// Note: O(n! + n^3 + n) ->>> O(n!) Complexity
// Note: O(4n^4 + 2n^3 + 3n) ->>> O(n^4) 